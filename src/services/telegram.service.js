require("dotenv").config();
const TelegramBot = require("node-telegram-bot-api");
const {
  renderButtonInlineQuery,
  renderButtonCallback,
} = require("../supports/telegram.support");
const {
  getFilms,
  getFilm,
  firstOrCreateMember,
} = require("./supabase.service");
const { renderAnswerInlineItem } = require("../supports/telegram.support");
const _ = require("lodash");
const { renderReplyMarkupFilm } = require("../supports/telegram.support");

const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, {
  polling: false,
  webHook: true,
});
global.bot = bot;

const webhookUrl = process.env.TELEGRAM_APP_URL + "/telegram/webhook";
bot.setWebHook(webhookUrl).then((res) => {
  console.table({
    message: "setup webhook success",
    res,
    webhookUrl,
  });
});

bot
  .setMyCommands(
    [
      {
        command: "start",
        description: "üçø B·∫Øt ƒë·∫ßu",
      },
      {
        command: "search",
        description: "üîç T√¨m ki·∫øm",
      },
    ],
    {
      scope: { type: "default" },
    }
  )
  .then((response) => console.log("DEBUG:", response))
  .catch(console.log);

bot.onText(/\/start/, async (msg) => {
  await bot.sendChatAction(msg.chat.id, "typing");
  await bot.sendMessage(
    msg.chat.id,
    `üçø Xin ch√†o c√°c b·∫°n y√™u th√≠ch phim!\n\nüîç ƒê·ªÉ t√¨m ki·∫øm, s·ª≠ d·ª•ng c√°c n√∫t b√™n d∆∞·ªõi ho·∫∑c g·ª≠i t√™n phim qua tin nh·∫Øn`,
    {
      reply_markup: {
        inline_keyboard: [[renderButtonInlineQuery("üîç B·∫Øt ƒë·∫ßu t√¨m ki·∫øm")]],
      },
    }
  );
});

bot.onText(/\/search/, async (msg) => {
  await bot.sendChatAction(msg.chat.id, "typing");
  await bot.sendMessage(
    msg.chat.id,
    'ƒê·ªÉ t√¨m b·ªô phim b·∫°n c·∫ßn, h√£y nh·∫•p v√†o n√∫t "T√¨m ki·∫øm" v√† nh·∫≠p y√™u c·∫ßu c·ªßa b·∫°n ho·∫∑c ch·ªâ c·∫ßn g·ª≠i y√™u c·∫ßu c·ªßa b·∫°n qua tin nh·∫Øn\n\nN·∫øu n√≥ kh√¥ng ho·∫°t ƒë·ªông, h√£y ƒë·ªçc h∆∞·ªõng d·∫´n',
    {
      reply_markup: {
        inline_keyboard: [
          [renderButtonInlineQuery("üîç T√¨m ki·∫øm")],
          // [
          //   renderButtonInlineQuery("üóÇ Th·ªÉ lo·∫°i", "#categories"),
          //   renderButtonCallback("üàÅ B·ªô l·ªçc", "create_filter"),
          // ],
          // [
          //   renderButtonInlineQuery("üïê L·ªãch s·ª≠", "#history"),
          //   renderButtonInlineQuery("‚≠ê Y√™u th√≠ch", "#favourite"),
          // ],
        ],
      },
    }
  );
});

bot.addListener("message", async (msg) => {
  await bot.sendChatAction(msg.chat.id, "typing");
  await firstOrCreateMember(msg.from);
  const isCommand = msg.text.startsWith("/");
  if (isCommand) return;
  bot.sendMessage(
    msg.chat.id,
    `üîç B·∫°n c√≥ th·ªÉ xem k·∫øt qu·∫£ c·ªßa truy v·∫•n "${msg.text}" b·∫±ng c√°ch nh·∫•p v√†o n√∫t "K·∫øt qu·∫£ t√¨m ki·∫øm"\n\nN·∫øu n√≥ kh√¥ng ho·∫°t ƒë·ªông, h√£y ƒë·ªçc h∆∞·ªõng d·∫´n`,
    {
      reply_markup: {
        inline_keyboard: [
          [renderButtonInlineQuery("üîç T√¨m ki·∫øm", msg.text)],
          // [
          //   renderButtonInlineQuery("üóÇ Th·ªÉ lo·∫°i", "#categories"),
          //   renderButtonCallback("üàÅ B·ªô l·ªçc", "create_filter"),
          // ],
          // [
          //   renderButtonInlineQuery("üïê L·ªãch s·ª≠", "#history"),
          //   renderButtonInlineQuery("‚≠ê Y√™u th√≠ch", "#favourite"),
          // ],
        ],
      },
    }
  );
});

bot.on("inline_query", async (query) => {
  const pageSize = 20;
  const offset = query?.offset || 0;
  const page = offset / pageSize + 1;
  const keyword = query?.query || "";

  console.table({ offset, pageSize, page, keyword });
  const films = await getFilms(page, pageSize, { keyword });

  const inlineQueryResponse =
    films.length == 0
      ? [renderAnswerInlineItem()]
      : films.map((el) => renderAnswerInlineItem(el));
  console.table(inlineQueryResponse.map((el) => _.pick(el, "id", "title")));

  bot.answerInlineQuery(query.id, inlineQueryResponse, {
    cache_time: 1,
    next_offset: `${pageSize * page}`,
  });
});

bot.onText(/\/watch (.+)/, async (msg, match) => {
  const filmId = match[1];
  await bot.sendChatAction(msg.chat.id, "typing");
  const film = await getFilm(filmId);

  if (!film) {
    bot.sendMessage(
      msg.chat.id,
      `R·∫•t ti·∫øt, ch√∫ng t√¥i kh√¥ng t√¨m th·∫•y phim b·∫°n y√™u c·∫ßu\n\nVui l√≤ng b·∫°n c√≥ th·ªÉ l·ª±a ch·ªçn phim kh√°c b·∫Øt n√∫t "T√¨m ki·∫øm"`,
      {
        reply_markup: {
          inline_keyboard: [[renderButtonInlineQuery("üîç T√¨m ki·∫øm")]],
        },
      }
    );
    return;
  }

  const labelCategory = "Th·ªÉ lo·∫°i: " + _.map(film.category, "name").join(", ");
  const labelCountry = "Qu·ªëc gia: " + _.map(film.country, "name").join(", ");

  const caption = `${film.name} (${film.origin_name})\n\n${
    film.content
      ? film.content.replace(/<[^>]*>?/gm, "").slice(0, 162) + "..."
      : "..."
  }\n\n---------------------\n${labelCategory}\n${labelCountry}\n${
    film.lang
  } | ${film.quality} | ${film.year}\n\nvia ${
    process.env.TELEGRAM_BOT_USERNAME
  }`;

  await bot.sendPhoto(msg.chat.id, film.thumb_url, {
    caption,
    reply_markup: await renderReplyMarkupFilm(
      film,
      msg.from,
      msg.chat.id,
      msg.message_id
    ),
  });
});

bot.on("polling_error", (error) => {
  console.log("Error", error.message);
});
